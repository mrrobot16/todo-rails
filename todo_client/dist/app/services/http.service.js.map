{"version":3,"file":"http.service.js","sourceRoot":"","sources":["http.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport {Todo} from '../models/todo.model';\n\n@Injectable()\nexport class HttpService{\n  public todos:any;\n  public all_todos:any;\n  public todo_end: string;\n\n  constructor(private http: Http){\n    console.log(\"Http Service on the move\");\n    this.all_todos = [];\n    this.todo_end = \"todos\";\n  }\n\n  get_todos():Promise<any>{\n    return this.http.get(this.todo_end)\n           .toPromise()\n           .then(res => res.json());\n  }\n\n  add_todo(todo: Todo):Promise<Todo>{\n    console.log(\"add_todo service 1: \", todo);\n    return this.post(todo);\n  }\n\n  get_todo(todo_id): void{\n    console.log(\"get_todo from clicking <li>\");\n    // return todo_id;\n  }\n\n  update_todo(todo){\n    return this.put(todo);\n  }\n\n  delete(todo){\n    return this.destroy(todo);\n  }\n\n  private destroy(todo: Todo):Promise<void>{\n    let headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n    return this.http\n    .delete(this.todo_end+'/'+todo.id, { headers: headers })\n    .toPromise().then((res)=>{\n      console.log('res from delete: ', res);\n    });\n  }\n\n  private put(todo: Todo):Promise<Todo>{\n\n  // Update existing TODO\n  let headers = new Headers({\n    'Content-Type': 'application/json'\n  });\n  // object sent to rails\n  var updated_todo = {\n    todo: todo\n  }\n\n  console.log({put: todo, updated_todo: updated_todo, json: JSON.stringify(updated_todo)})\n\n  return this.http\n    .put(this.todo_end+'/'+todo.id, JSON.stringify(updated_todo), { headers: headers })\n    .toPromise()\n    .then(res => res.json());\n  }\n\n  private post(todo: Todo): Promise<Todo> {\n    let headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n    let todoParams = {\n      todo: todo\n    }\n    return this.http\n      .post(this.todo_end, JSON.stringify(todoParams), { headers: headers })\n      .toPromise()\n      .then(res => res.json());\n  }\n\n\n\n\n\n}\n"]}